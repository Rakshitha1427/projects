import json
import os   
import matplotlib.pyplot as plt  
from datetime import datetime   
EXPENSES_FILE = 'expenses.json' 


def load_expenses():
    if os.path.exists(EXPENSES_FILE) and os.path.getsize(EXPENSES_FILE) > 0:
        with open(EXPENSES_FILE, 'r') as file:
            return json.load(file)
    return []

def save_expenses(expenses): 
    with open(EXPENSES_FILE, 'w') as file:
        json.dump(expenses, file, indent=4)
    print("Expense saved successfully")

 
def delete_expense(expenses):
    if not expenses:
        print("No expenses to delete.")
        return
    print("\nExpenses:")
    for idx, expense in enumerate(expenses, 1):
        print(f"{idx}. {expense['date']} - {expense['category']} - ${expense['amount']}")
    try:
        to_delete = int(input("Enter the number of the expense to delete: "))
        if 1 <= to_delete <= len(expenses):
            removed = expenses.pop(to_delete - 1)
            save_expenses(expenses)
            print(f"Deleted: {removed['date']} - {removed['category']} - ${removed['amount']}")
        else:
            print("Invalid number.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")


def add_expense(expenses):
    try:
        amount = float(input("Enter amount you spend:"))
        category = input("Enter category (e.g., Food, Transport, Entertainment): ").capitalize()
        date_str = input("Enter date, press Enter for today: ")
        
        if not date_str:
            date = datetime.now().strftime("%Y-%m-%d")
        else:
            datetime.strptime(date_str, "%Y-%m-%d")  
            date = date_str

        new_expense = {
            "amount": amount,
            "category": category,
            "date": date
        }
        expenses.append(new_expense)
        print("Expense added.")
        save_expenses(expenses)
    except ValueError:
        print("Invalid input,Please enter a valid amount and date.")


def view_summary(expenses):

    if not expenses:
        print("No expenses added ")
        return

    
    category_summary = {}
    for expense in expenses:
        category = expense['category']
        amount = expense['amount']
        category_summary[category] = category_summary.get(category, 0) + amount

    print("\n expences ")
   
    for category, total in category_summary.items():
        print(f"  {category}: ${total:.2f}")

    overall_total = sum(expense['amount'] for expense in expenses)
    print(f"\nTotal Overall Spending: ${overall_total:.2f}")


def edit_expense(expenses):
    if not expenses:
        print("No expenses to edit.")
        return
    print("\nExpenses:")
    for idx, expense in enumerate(expenses, 1):
        print(f"{idx}. {expense['date']} - {expense['category']} - ${expense['amount']}")
    try:
        to_edit = int(input("Enter the number of the expense to edit: "))
        if 1 <= to_edit <= len(expenses):
            expense = expenses[to_edit - 1]
            print(f"Editing: {expense['date']} - {expense['category']} - ${expense['amount']}")
            new_amount = input(f"Enter new amount (leave blank to keep {expense['amount']}): ")
            new_category = input(f"Enter new category (leave blank to keep {expense['category']}): ")
            new_date = input(f"Enter new date (YYYY-MM-DD, leave blank to keep {expense['date']}): ")
            if new_amount:
                try:
                    expense['amount'] = float(new_amount)
                except ValueError:
                    print("Invalid amount. Keeping previous value.")
            if new_category:
                expense['category'] = new_category.capitalize()
            if new_date:
                try:
                    datetime.strptime(new_date, "%Y-%m-%d")
                    expense['date'] = new_date
                except ValueError:
                    print("Invalid date format. Keeping previous value.")
            save_expenses(expenses)
            print("Expense updated.")
        else:
            print("Invalid number.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")


def show_graphical_summary(expenses):
    if not expenses:
        print("No expenses to display graph.")
        return
    category_summary = {}
    for expense in expenses:
        category = expense['category']
        amount = expense['amount']
        category_summary[category] = category_summary.get(category, 0) + amount
    categories = list(category_summary.keys())
    totals = list(category_summary.values())
    plt.figure(figsize=(8, 5))
    plt.bar(categories, totals, color='skyblue')
    plt.xlabel('Category')
    plt.ylabel('Total Spending')
    plt.title('Spending by Category')
    plt.tight_layout()
    plt.show()


def main():
    
    expenses = load_expenses()
    print("Welcome to the Personal Expense Tracker!")

    while True:
        print("\n Personal Expense Tracker")
        print("1. Add a new expense")
        print("2. View spending summary")
        print("3. Delete an expense")
        print("4. Edit an expense")
        print("5. Graphical summary")
        print("6. Exit")
        
        choice = input("Enter your choice (1-6): ")
        
        if choice == '1':
            add_expense(expenses)
        elif choice == '2':
            view_summary(expenses)
        elif choice == '3':
            delete_expense(expenses)
        elif choice == '4':
            edit_expense(expenses)
        elif choice == '5':
            show_graphical_summary(expenses)
        elif choice == '6':
            print("Exiting program")
            break
        else:
            print("Invalid choice, Please enter a number between (1-6)")

if __name__ == "__main__":
    main()
